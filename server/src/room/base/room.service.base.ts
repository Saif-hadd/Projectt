/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import { Inject } from "@nestjs/common";
import { Prisma, Room, Patient, SagesFemme, Message } from "@prisma/client";
import { PaginatedInterface } from "../../util/PaginatedInterface";
import { Logger } from "winston";
import { DbService } from "src/dbService/db.service";

export class RoomServiceBase {
  constructor(
    protected readonly prisma: DbService,
    @Inject("winston")
    protected readonly logger: Logger
  ) {}

  async count<T extends Prisma.RoomFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RoomFindManyArgs>
  ): Promise<number> {
    return await this.prisma.room.count(args);
  }

  async findMany<T extends Prisma.RoomFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RoomFindManyArgs>
  ): Promise<PaginatedInterface<Room>> {
    const [data, totalCount] = await Promise.all([
      this.prisma.room.findMany(args),
      this.prisma.room.count({ where: { deletedAt: null } }),
    ]);

    return { paginatedResult: data, totalCount };
  }
  async findOne<T extends Prisma.RoomFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RoomFindUniqueArgs>
  ): Promise<Room | null> {
    return await this.prisma.room.findUnique(args);
  }
  async create<T extends Prisma.RoomCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RoomCreateArgs>
  ): Promise<Room> {
    return await this.prisma.room.create<T>(args);
  }
  async createMany<T extends Prisma.RoomCreateManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RoomCreateManyArgs>
  ): Promise<Prisma.BatchPayload> {
    return await this.prisma.room.createMany<T>(args);
  }
  async update<T extends Prisma.RoomUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RoomUpdateArgs>
  ): Promise<Room> {
    return await this.prisma.room.update<T>(args);
  }
  async delete<T extends Prisma.RoomDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RoomDeleteArgs>
  ): Promise<Room> {
    return await this.prisma.room.delete(args);
  }

  async updateMany<T extends Prisma.RoomUpdateManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RoomUpdateManyArgs>
  ): Promise<Prisma.BatchPayload> {
    return await this.prisma.room.updateMany(args);
  }

  async findPatients(
    parentId: string,
    args: Prisma.PatientFindManyArgs
  ): Promise<Patient[] | null> {
    return this.prisma.room
      .findUnique({
        where: { id: parentId },
      })
      .patients(args);
  }

  async findSagesFemmes(
    parentId: string,
    args: Prisma.SagesFemmeFindManyArgs
  ): Promise<SagesFemme[] | null> {
    return this.prisma.room
      .findUnique({
        where: { id: parentId },
      })
      .sagesFemmes(args);
  }

  async findMessage(
    parentId: string,
    args: Prisma.MessageFindManyArgs
  ): Promise<Message[] | null> {
    return this.prisma.room
      .findUnique({
        where: { id: parentId },
      })
      .message(args);
  }
}
