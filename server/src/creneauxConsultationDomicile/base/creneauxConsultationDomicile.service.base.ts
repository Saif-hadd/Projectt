/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import { Inject } from "@nestjs/common";
import {
  Prisma,
  CreneauxConsultationDomicile,
  SagesFemme,
} from "@prisma/client";
import { PaginatedInterface } from "../../util/PaginatedInterface";
import { Logger } from "winston";
import { DbService } from "src/dbService/db.service";

export class CreneauxConsultationDomicileServiceBase {
  constructor(
    protected readonly prisma: DbService,
    @Inject("winston")
    protected readonly logger: Logger
  ) {}

  async count<T extends Prisma.CreneauxConsultationDomicileFindManyArgs>(
    args: Prisma.SelectSubset<
      T,
      Prisma.CreneauxConsultationDomicileFindManyArgs
    >
  ): Promise<number> {
    return await this.prisma.creneauxConsultationDomicile.count(args);
  }

  async findMany<T extends Prisma.CreneauxConsultationDomicileFindManyArgs>(
    args: Prisma.SelectSubset<
      T,
      Prisma.CreneauxConsultationDomicileFindManyArgs
    >
  ): Promise<PaginatedInterface<CreneauxConsultationDomicile>> {
    const [data, totalCount] = await Promise.all([
      this.prisma.creneauxConsultationDomicile.findMany(args),
      this.prisma.creneauxConsultationDomicile.count({
        where: { deletedAt: null },
      }),
    ]);

    return { paginatedResult: data, totalCount };
  }
  async findOne<T extends Prisma.CreneauxConsultationDomicileFindUniqueArgs>(
    args: Prisma.SelectSubset<
      T,
      Prisma.CreneauxConsultationDomicileFindUniqueArgs
    >
  ): Promise<CreneauxConsultationDomicile | null> {
    return await this.prisma.creneauxConsultationDomicile.findUnique(args);
  }
  async create<T extends Prisma.CreneauxConsultationDomicileCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CreneauxConsultationDomicileCreateArgs>
  ): Promise<CreneauxConsultationDomicile> {
    return await this.prisma.creneauxConsultationDomicile.create<T>(args);
  }
  async createMany<T extends Prisma.CreneauxConsultationDomicileCreateManyArgs>(
    args: Prisma.SelectSubset<
      T,
      Prisma.CreneauxConsultationDomicileCreateManyArgs
    >
  ): Promise<Prisma.BatchPayload> {
    return await this.prisma.creneauxConsultationDomicile.createMany<T>(args);
  }
  async update<T extends Prisma.CreneauxConsultationDomicileUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CreneauxConsultationDomicileUpdateArgs>
  ): Promise<CreneauxConsultationDomicile> {
    return await this.prisma.creneauxConsultationDomicile.update<T>(args);
  }
  async delete<T extends Prisma.CreneauxConsultationDomicileDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CreneauxConsultationDomicileDeleteArgs>
  ): Promise<CreneauxConsultationDomicile> {
    return await this.prisma.creneauxConsultationDomicile.delete(args);
  }

  async updateMany<T extends Prisma.CreneauxConsultationDomicileUpdateManyArgs>(
    args: Prisma.SelectSubset<
      T,
      Prisma.CreneauxConsultationDomicileUpdateManyArgs
    >
  ): Promise<Prisma.BatchPayload> {
    return await this.prisma.creneauxConsultationDomicile.updateMany(args);
  }

  async getSagesFemmes(parentId: string): Promise<SagesFemme | null> {
    return this.prisma.creneauxConsultationDomicile
      .findUnique({
        where: { id: parentId },
      })
      .sagesFemmes();
  }
}
