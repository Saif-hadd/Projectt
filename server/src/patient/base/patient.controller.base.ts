/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { BatchPayload } from "../../BatchPayload";
import { Logger } from "winston";
import { fileDto } from "../../file.dto";
import * as XLSX from "xlsx";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import * as abacUtil from "../../auth/abac.util";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { PaginatedInterface } from "../../util/PaginatedInterface";
import { PatientService } from "../patient.service";
import { PatientCreateInput } from "./PatientCreateInput";
import { PatientCreateManyInput } from "./PatientCreateManyInput";
import { PatientWhereInput } from "./PatientWhereInput";
import { PatientWhereUniqueInput } from "./PatientWhereUniqueInput";
import { PatientFindManyArgs } from "./PatientFindManyArgs";
import { PatientupdateManyArgs } from "./PatientupdateManyArgs";
import { PatientUpdateInput } from "./PatientUpdateInput";
import { Patient } from "./Patient";
import { PatientSageFemmeMappingWhereInput } from "../../patientSageFemmeMapping/base/PatientSageFemmeMappingWhereInput";
import { PatientSageFemmeMapping } from "../../patientSageFemmeMapping/base/PatientSageFemmeMapping";
import { UserWhereInput } from "../../user/base/UserWhereInput";
import { User } from "../../user/base/User";
import { getListPatientDto } from "./getListPatient.dto";
@swagger.ApiBearerAuth()
export class PatientControllerBase {
  constructor(
    protected readonly service: PatientService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder,
    protected readonly logger: Logger
  ) {}

  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Post()
  @nestAccessControl.UseRoles({
    resource: "Patient",
    action: "create",
    possession: "any",
  })
  @swagger.ApiCreatedResponse({ type: Patient })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async create(
    @common.Body() data: PatientCreateInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<Patient> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "create",
      possession: "any",
      resource: "Patient",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const properties = invalidAttributes
        .map((attribute: string) => JSON.stringify(attribute))
        .join(", ");
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      this.logger.log({
        level: "error",
        message: `providing the properties: ${properties} on ${"Patient"} creation is forbidden for roles: ${roles}`,
      });

      throw new errors.ForbiddenException(
        `providing the properties: ${properties} on ${"Patient"} creation is forbidden for roles: ${roles}`
      );
    }
    return await this.service.create({
      data: {
        ...data,

        room: data.room
          ? {
              connect: data.room,
            }
          : undefined,

        sagesFemmes: data.sagesFemmes
          ? {
              connect: data.sagesFemmes,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        deletedAt: true,
        dateNaissance: true,
        adresse: true,
        medecinTraitant: true,

        room: {
          select: {
            id: true,
          },
        },

        sagesFemmes: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Post("/createMany")
  @nestAccessControl.UseRoles({
    resource: "Patient",
    action: "create",
    possession: "any",
  })
  @swagger.ApiCreatedResponse({ type: Patient })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async createMany(
    @common.Body() data: Array<PatientCreateManyInput>,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<BatchPayload | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "create",
      possession: "any",
      resource: "Patient",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const properties = invalidAttributes
        .map((attribute: string) => JSON.stringify(attribute))
        .join(", ");
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      this.logger.log({
        level: "error",
        message: `providing the properties: ${properties} on ${"Patient"} creation is forbidden for roles: ${roles}`,
      });

      throw new errors.ForbiddenException(
        `providing the properties: ${properties} on ${"Patient"} creation is forbidden for roles: ${roles}`
      );
    }
    return await this.service.createMany({
      data: data,
      skipDuplicates: false,
    });
  }

  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get()
  @nestAccessControl.UseRoles({
    resource: "Patient",
    action: "read",
    possession: "any",
  })
  @swagger.ApiOkResponse({ type: getListPatientDto })
  @swagger.ApiForbiddenResponse()
  @swagger.ApiQuery({
    type: () => PatientFindManyArgs,
    style: "deepObject",
    explode: true,
  })
  async findMany(
    @common.Req() request: Request,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<PaginatedInterface<Patient>> {
    const args = plainToClass(PatientFindManyArgs, request.query);

    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Patient",
    });
    const results = await this.service.findMany({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        deletedAt: true,
        dateNaissance: true,
        adresse: true,
        medecinTraitant: true,

        room: {
          select: {
            id: true,
          },
        },

        sagesFemmes: {
          select: {
            id: true,
          },
        },
      },
    });
    const result = results.paginatedResult.map((result: Patient) =>
      permission.filter(result)
    );
    return { paginatedResult: result, totalCount: results.totalCount };
  }

  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get("/fileExcel")
  @nestAccessControl.UseRoles({
    resource: "Patient",
    action: "read",
    possession: "any",
  })
  @swagger.ApiOkResponse({ type: fileDto })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findDataForExcel(
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<fileDto> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Patient",
    });
    const results = await this.service.findMany({
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        deletedAt: true,
        dateNaissance: true,
        adresse: true,
        medecinTraitant: true,

        room: {
          select: {
            id: true,
          },
        },

        sagesFemmes: {
          select: {
            id: true,
          },
        },
      },
    });
    const result = results.paginatedResult.map((result: Patient) =>
      permission.filter(result)
    );
    var excelFile = XLSX.utils.json_to_sheet(result);

    var Workbook = XLSX.utils.book_new();
    await XLSX.utils.book_append_sheet(Workbook, excelFile, "test");
    const file = await XLSX.write(Workbook, {
      bookType: "xlsx",
      bookSST: true,
      type: "base64",
    });
    return { file: file };
  }

  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get("/:id")
  @nestAccessControl.UseRoles({
    resource: "Patient",
    action: "read",
    possession: "own",
  })
  @swagger.ApiOkResponse({ type: Patient })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findOne(
    @common.Param() params: PatientWhereUniqueInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<Patient | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "own",
      resource: "Patient",
    });
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        deletedAt: true,
        dateNaissance: true,
        adresse: true,
        medecinTraitant: true,

        room: {
          select: {
            id: true,
          },
        },

        sagesFemmes: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      this.logger.log({
        level: "error",
        message: `No resource was found for ${JSON.stringify(params)}`,
      });
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return permission.filter(result);
  }

  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Patch("/:id")
  @nestAccessControl.UseRoles({
    resource: "Patient",
    action: "update",
    possession: "any",
  })
  @swagger.ApiOkResponse({ type: Patient })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async update(
    @common.Param() params: PatientWhereUniqueInput,
    @common.Body()
    data: PatientUpdateInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<Patient | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Patient",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const properties = invalidAttributes
        .map((attribute: string) => JSON.stringify(attribute))
        .join(", ");
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      this.logger.log({
        level: "error",
        message: `No resource was found for ${JSON.stringify(params)}`,
      });
      throw new errors.ForbiddenException(
        `providing the properties: ${properties} on ${"Patient"} update is forbidden for roles: ${roles}`
      );
    }
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          room: data.room
            ? {
                connect: data.room,
              }
            : undefined,

          sagesFemmes: data.sagesFemmes
            ? {
                connect: data.sagesFemmes,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          deletedAt: true,
          dateNaissance: true,
          adresse: true,
          medecinTraitant: true,

          room: {
            select: {
              id: true,
            },
          },

          sagesFemmes: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error: any) {
      if (isRecordNotFoundError(error)) {
        this.logger.log({
          level: "error",
          message: `No resource was found for ${JSON.stringify(params)}`,
        });
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Delete("/:id")
  @nestAccessControl.UseRoles({
    resource: "Patient",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiOkResponse({ type: Patient })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async delete(
    @common.Param() params: PatientWhereUniqueInput
  ): Promise<Patient | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          deletedAt: true,
          dateNaissance: true,
          adresse: true,
          medecinTraitant: true,

          room: {
            select: {
              id: true,
            },
          },

          sagesFemmes: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error: any) {
      if (isRecordNotFoundError(error)) {
        this.logger.log({
          level: "error",
          message: `No resource was found for ${JSON.stringify(params)}`,
        });
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get("/:id/patientSageFemmeMapping")
  @nestAccessControl.UseRoles({
    resource: "Patient",
    action: "read",
    possession: "any",
  })
  @swagger.ApiQuery({
    type: () => PatientSageFemmeMappingWhereInput,
    style: "deepObject",
    explode: true,
  })
  async findManyPatientSageFemmeMapping(
    @common.Req() request: Request,
    @common.Param() params: PatientWhereUniqueInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<PatientSageFemmeMapping[] | null> {
    const query: PatientSageFemmeMappingWhereInput = request.query;
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "PatientSageFemmeMapping",
    });
    const results = await this.service.findPatientSageFemmeMapping(params.id, {
      where: query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        deletedAt: true,
        estSagefemmeReference: true,

        patients: {
          select: {
            id: true,
          },
        },

        sagesFemmes: {
          select: {
            id: true,
          },
        },
      },
    });
    return results && results.map((result) => permission.filter(result));
  }

  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Post("/:id/patientSageFemmeMapping")
  @nestAccessControl.UseRoles({
    resource: "Patient",
    action: "update",
    possession: "any",
  })
  async createPatientSageFemmeMapping(
    @common.Param() params: PatientWhereUniqueInput,
    @common.Body() body: PatientWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      patientSageFemmeMapping: {
        connect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Patient",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Patient"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Patch("/:id/patientSageFemmeMapping")
  @nestAccessControl.UseRoles({
    resource: "Patient",
    action: "update",
    possession: "any",
  })
  async updatePatientSageFemmeMapping(
    @common.Param() params: PatientWhereUniqueInput,
    @common.Body() body: PatientWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      patientSageFemmeMapping: {
        set: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Patient",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Patient"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Delete("/:id/patientSageFemmeMapping")
  @nestAccessControl.UseRoles({
    resource: "Patient",
    action: "update",
    possession: "any",
  })
  async deletePatientSageFemmeMapping(
    @common.Param() params: PatientWhereUniqueInput,
    @common.Body() body: PatientWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      patientSageFemmeMapping: {
        disconnect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Patient",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Patient"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get("/:id/users")
  @nestAccessControl.UseRoles({
    resource: "Patient",
    action: "read",
    possession: "any",
  })
  @swagger.ApiQuery({
    type: () => UserWhereInput,
    style: "deepObject",
    explode: true,
  })
  async findManyUsers(
    @common.Req() request: Request,
    @common.Param() params: PatientWhereUniqueInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<User[] | null> {
    const query: UserWhereInput = request.query;
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "User",
    });
    const results = await this.service.findUsers(params.id, {
      where: query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        deletedAt: true,
        Prenom: true,
        nomN: true,
        username: true,
        isValid: true,
        roles: true,

        sageFemmes: {
          select: {
            id: true,
          },
        },

        patient: {
          select: {
            id: true,
          },
        },

        telephone: true,
        email: true,
      },
    });
    return results && results.map((result) => permission.filter(result));
  }

  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Post("/:id/users")
  @nestAccessControl.UseRoles({
    resource: "Patient",
    action: "update",
    possession: "any",
  })
  async createUsers(
    @common.Param() params: PatientWhereUniqueInput,
    @common.Body() body: PatientWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      users: {
        connect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Patient",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Patient"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Patch("/:id/users")
  @nestAccessControl.UseRoles({
    resource: "Patient",
    action: "update",
    possession: "any",
  })
  async updateUsers(
    @common.Param() params: PatientWhereUniqueInput,
    @common.Body() body: PatientWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      users: {
        set: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Patient",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Patient"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Delete("/:id/users")
  @nestAccessControl.UseRoles({
    resource: "Patient",
    action: "update",
    possession: "any",
  })
  async deleteUsers(
    @common.Param() params: PatientWhereUniqueInput,
    @common.Body() body: PatientWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      users: {
        disconnect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Patient",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Patient"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
